generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User{
  id   String  @id @default(uuid())
  emailAddress  String @unique
  firstName   String?
  lastName    String?
  imageUrl String?
  credits Int @default(150)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userToProjects UserToProject[]
  questionsAsked Question[]

  StripeTransaction StripeTransaction[]
}
model Project {
  id        String   @id @default(uuid())
  name      String
  githubUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  isArchived  Boolean   @default(false)
  archivedAt  DateTime?
  userToProjects UserToProject[]
  commits   Commit[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  savedQuestions Question[]
  meetings  Meeting[]
}
model UserToProject {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model SourceCodeEmbedding{
  id String @id @default(uuid())

  summaryEmbedding Unsupported("vector(768)")?
  sourceCode String
  fileName String
  summary String
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  question      String
  answer        String

  filesReferences Json?

  projectId     String
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Commit{
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  commitMessage String
  commitHash String
  commitAuthorName String
  commitAuthorAvatar String
  commitDate DateTime
  //ai summary
  summary String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}
model Meeting {
  id String @id @default(uuid())
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name String
  meetingUrl String
  meetingDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issues Issue[]
  status MeetingStatus @default(PROCESSING)
}
model StripeTransaction{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  credits Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}
model Issue {
  id String @id @default(uuid())
  start String
  end String
  gist String
  headline String
  summary String
  meetingId String?
  meeting Meeting? @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}